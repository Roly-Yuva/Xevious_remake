-- update point values and destroy gunner instance when kill() runs, and plays death sound
local function kill(self)
	-- death sound
	self.alive = false
	local points = self.points
	-- making sure points value doesn't accidentally go over
	if not player_is_alive then self.points = 0 end
	msg.post("/player", "points", {points = self.points})
	msg.post("/screen#game", "points", {points = self.points})
	self.points = points
	go.delete()
end

function init(self)
	-- set direction vector, with y = -1 (down)
	local janky_level
	local delay
	if janky_mode then janky_level = 15 else janky_level = 1 end
	if souls_mode then janky_level = janky_level * 2 end
	if rnd.range(0, 99) <= (janky_level * 5) - 1 then
		delay = 0
		self.points = 250
	else
		delay = rnd.range(1, 2)
		self.points = 100
	end
	self.speed = 160
	self.dir = vmath.vector3(0, -1, 0)
	self.alive = true
	self.shoot = timer.delay(delay, true, function(self, handle, time_elapsed)
		local p = go.get_position()
		p.y = p.y - 80
		factory.create("#factory", p)
	end)
end

function update(self, dt)
	-- move based on current position, direction, and speed, and delete when gunner instance goes off screen
	local p = go.get_position()
	go.set_position(p + self.dir * self.speed * dt)
	if go.get_position().y <= -60 or not player_is_alive then go.delete() end
	if janky_mode then
		self.speed = rnd.range(60, 820)
	end
end

function on_message(self, message_id, message, sender)
	-- kill gunner instance on collision with player or player bullet
	if message_id == hash("collision_response") and self.alive then
		-- this is done so that enemies can't spawn overlapped; they are deleted if they do
		if message.other_group == hash("air_enemy") then
			go.delete()
		else
			kill(self)
		end
	end
end
