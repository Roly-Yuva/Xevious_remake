player_is_alive = true
difficulty = 1
-- function that sets player_is_alive to false so all remaining enemy ships and bullets are destroyed
-- and plays death sound and sends necessary messages to go to game over screen, then leaderboard
function defeat(self)
	-- death sound
	msg.post("/sound_handler#player_defeat", "play_sound")
	msg.post("#crosshair", "play_animation", {id = hash("player_crosshair")})
	self.bomb_cooldown = false
	if player_is_alive then
		-- local wait = timer.delay(2, false, function(self, handle, time_elapsed)
			msg.post("/screen#screen_handler", "game_over", {score = self.score})
		-- end)
	end
	player_is_alive = false
	msg.post("/gunner_spawn#gunner_spawn", "toggle", {status = false})
	msg.post("/tank_spawn#tank_spawn", "toggle", {status = false})
	msg.post(".", "release_input_focus")
	msg.post(".", "disable")
end

function init(self)
	-- set direction vector, blast cooldown value, score value, and screen bounds so player cannot move offscreen
	local w, h = window.get_size()
	self.speed = 280
	self.dir = vmath.vector3()
	self.blast_cooldown = 0
	self.score = 0
	self.left_bound = 44
	self.right_bound = w - 44
	self.up_bound = h - 52 - 220
	self.down_bound = 52
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	-- movement based on current position, direction, and speed
	local p = go.get_position()
	-- increase horizontal move speed
	local x_multiplier
	if self.dir.x ~= 0 then
		x_multiplier = 1.25
	else
		x_multiplier = 1
	end
	go.set_position(p + self.dir * self.speed * x_multiplier * dt)
	self.dir = vmath.vector3()
	-- counting down on blast cooldown
	if self.blast_cooldown > 0 and not janky_mode then self.blast_cooldown = self.blast_cooldown - 0.01 elseif janky_mode then self.blast_cooldown = 0 end
end

function on_message(self, message_id, message, sender)
	-- "defeat" player if they collide with enemy or enemy bullet
	if message_id == hash("collision_response") then
		defeat(self)
	-- update player point value
	elseif message_id == hash("points") then
		self.score = self.score + message.points
		if self.score >= 1000000 then
			local points = self.score - 1000000
			self.score = points
		end
	-- reset player object position and receive input focus
	elseif message_id == hash("start") then
		go.set_position(vmath.vector3(720, 98, 1))
		self.score = 0
	elseif message_id == hash("bomb_exploded") then
		msg.post("#crosshair", "play_animation", {id = hash("player_crosshair")})
		self.bomb_cooldown = false
	end
end

function on_input(self, action_id, action)
	-- set movement direction via a vector if player is within screen bounds
	if action_id == hash("left") and go.get_position().x > self.left_bound then
		self.dir.x = -1
	elseif action_id == hash("right") and go.get_position().x < self.right_bound then
		self.dir.x = 1
	elseif action_id == hash("up") and go.get_position().y < self.up_bound then
		self.dir.y = 1
	elseif action_id == hash("down") and go.get_position().y > self.down_bound then
		self.dir.y = -1
	elseif action_id == hash("blast") and self.blast_cooldown <= 0 then
		msg.post("/sound_handler#player_shoot", "play_sound")
		-- spawns bullets if cooldown is not active, and then sets the cooldown
		local p = go.get_position()
		p.y = p.y + 60
		factory.create("#bullet", p)
		self.blast_cooldown = 0.30
	elseif action_id == hash("bomb") and not self.bomb_cooldown then
		msg.post("/sound_handler#player_bomb", "play_sound")
		local p = go.get_position()
		p.y = p.y + 60
		factory.create("#bomb", p)
		self.bomb_cooldown = true
		msg.post("/screen#screen_handler", "bomb_fired", {x = p.x, y = p.y + 240})
		msg.post("#crosshair", "play_animation", {id = hash("player_crosshair_middle")})
	end
end
